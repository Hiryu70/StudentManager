/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Get all students
     * @return Success
     */
    getAll(): Observable<StudentsListVm> {
        let url_ = this.baseUrl + "/api/Student/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<StudentsListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<StudentsListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<StudentsListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StudentsListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StudentsListVm>(<any>null);
    }

    /**
     * Get all students with filter parameter
     * @param body (optional) Filter parameters
     * @return Success
     */
    getAllFiltered(body: GetStudentsListQuery | undefined): Observable<StudentsListVm> {
        let url_ = this.baseUrl + "/api/Student/GetAllFiltered";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllFiltered(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllFiltered(<any>response_);
                } catch (e) {
                    return <Observable<StudentsListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<StudentsListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllFiltered(response: HttpResponseBase): Observable<StudentsListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StudentsListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StudentsListVm>(<any>null);
    }

    /**
     * Get student details
     * @param id Student ID
     * @return Success
     */
    get(id: string): Observable<StudentDetailVm> {
        let url_ = this.baseUrl + "/api/Student/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<StudentDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<StudentDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<StudentDetailVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StudentDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StudentDetailVm>(<any>null);
    }

    /**
     * Update student
     * @param body (optional) New student details
     * @return Success
     */
    update(body: UpdateStudentCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Student/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Create new student
     * @param body (optional) New student details
     * @return Success
     */
    create(body: CreateStudentCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Student/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Delete student
     * @param id Student ID
     * @return Success
     */
    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Student/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Check if nickname is already taken
     * @param body (optional) 
     * @return Success
     */
    checkNicknameNotTaken(body: CheckNicknameNotTakenQuery | undefined): Observable<NicknameNotTakenVm> {
        let url_ = this.baseUrl + "/api/Student/CheckNicknameNotTaken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckNicknameNotTaken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckNicknameNotTaken(<any>response_);
                } catch (e) {
                    return <Observable<NicknameNotTakenVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<NicknameNotTakenVm>><any>_observableThrow(response_);
        }));
    }

    protected processCheckNicknameNotTaken(response: HttpResponseBase): Observable<NicknameNotTakenVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NicknameNotTakenVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NicknameNotTakenVm>(<any>null);
    }
}

export enum Gender {
    _0 = 0,
    _1 = 1,
}

export class StudentVm implements IStudentVm {
    id?: string;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    gender?: Gender;
    nickname?: string | undefined;

    constructor(data?: IStudentVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.surname = _data["Surname"];
            this.patronymic = _data["Patronymic"];
            this.gender = _data["Gender"];
            this.nickname = _data["Nickname"];
        }
    }

    static fromJS(data: any): StudentVm {
        data = typeof data === 'object' ? data : {};
        let result = new StudentVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Surname"] = this.surname;
        data["Patronymic"] = this.patronymic;
        data["Gender"] = this.gender;
        data["Nickname"] = this.nickname;
        return data; 
    }
}

export interface IStudentVm {
    id?: string;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    gender?: Gender;
    nickname?: string | undefined;
}

export class StudentsListVm implements IStudentsListVm {
    totalCount?: number;
    students?: StudentVm[] | undefined;

    constructor(data?: IStudentsListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["TotalCount"];
            if (Array.isArray(_data["Students"])) {
                this.students = [] as any;
                for (let item of _data["Students"])
                    this.students!.push(StudentVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StudentsListVm {
        data = typeof data === 'object' ? data : {};
        let result = new StudentsListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TotalCount"] = this.totalCount;
        if (Array.isArray(this.students)) {
            data["Students"] = [];
            for (let item of this.students)
                data["Students"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStudentsListVm {
    totalCount?: number;
    students?: StudentVm[] | undefined;
}

export class GetStudentsListQuery implements IGetStudentsListQuery {
    searchString?: string | undefined;

    constructor(data?: IGetStudentsListQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.searchString = _data["SearchString"];
        }
    }

    static fromJS(data: any): GetStudentsListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetStudentsListQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchString"] = this.searchString;
        return data; 
    }
}

export interface IGetStudentsListQuery {
    searchString?: string | undefined;
}

export class StudentDetailVm implements IStudentDetailVm {
    id?: string;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    gender?: Gender;
    nickname?: string | undefined;

    constructor(data?: IStudentDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.surname = _data["Surname"];
            this.patronymic = _data["Patronymic"];
            this.gender = _data["Gender"];
            this.nickname = _data["Nickname"];
        }
    }

    static fromJS(data: any): StudentDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new StudentDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Surname"] = this.surname;
        data["Patronymic"] = this.patronymic;
        data["Gender"] = this.gender;
        data["Nickname"] = this.nickname;
        return data; 
    }
}

export interface IStudentDetailVm {
    id?: string;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    gender?: Gender;
    nickname?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class UpdateStudentCommand implements IUpdateStudentCommand {
    id?: string;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    gender?: Gender;
    nickname?: string | undefined;

    constructor(data?: IUpdateStudentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.surname = _data["Surname"];
            this.patronymic = _data["Patronymic"];
            this.gender = _data["Gender"];
            this.nickname = _data["Nickname"];
        }
    }

    static fromJS(data: any): UpdateStudentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateStudentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Surname"] = this.surname;
        data["Patronymic"] = this.patronymic;
        data["Gender"] = this.gender;
        data["Nickname"] = this.nickname;
        return data; 
    }
}

export interface IUpdateStudentCommand {
    id?: string;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    gender?: Gender;
    nickname?: string | undefined;
}

export class CreateStudentCommand implements ICreateStudentCommand {
    id?: string;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    gender?: Gender;
    nickname?: string | undefined;

    constructor(data?: ICreateStudentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.surname = _data["Surname"];
            this.patronymic = _data["Patronymic"];
            this.gender = _data["Gender"];
            this.nickname = _data["Nickname"];
        }
    }

    static fromJS(data: any): CreateStudentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStudentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Surname"] = this.surname;
        data["Patronymic"] = this.patronymic;
        data["Gender"] = this.gender;
        data["Nickname"] = this.nickname;
        return data; 
    }
}

export interface ICreateStudentCommand {
    id?: string;
    name?: string | undefined;
    surname?: string | undefined;
    patronymic?: string | undefined;
    gender?: Gender;
    nickname?: string | undefined;
}

export class CheckNicknameNotTakenQuery implements ICheckNicknameNotTakenQuery {
    studentId?: string;
    nickname?: string | undefined;

    constructor(data?: ICheckNicknameNotTakenQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.studentId = _data["StudentId"];
            this.nickname = _data["Nickname"];
        }
    }

    static fromJS(data: any): CheckNicknameNotTakenQuery {
        data = typeof data === 'object' ? data : {};
        let result = new CheckNicknameNotTakenQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["StudentId"] = this.studentId;
        data["Nickname"] = this.nickname;
        return data; 
    }
}

export interface ICheckNicknameNotTakenQuery {
    studentId?: string;
    nickname?: string | undefined;
}

export class NicknameNotTakenVm implements INicknameNotTakenVm {
    result?: boolean;

    constructor(data?: INicknameNotTakenVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["Result"];
        }
    }

    static fromJS(data: any): NicknameNotTakenVm {
        data = typeof data === 'object' ? data : {};
        let result = new NicknameNotTakenVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Result"] = this.result;
        return data; 
    }
}

export interface INicknameNotTakenVm {
    result?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}