<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StudentManager.API</name>
    </assembly>
    <members>
        <member name="T:StudentManager.API.Common.CustomExceptionHandlerMiddleware">
            <summary>
            Middleware for exception handling
            </summary>
        </member>
        <member name="M:StudentManager.API.Common.CustomExceptionHandlerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <inheritdoc />
        </member>
        <member name="M:StudentManager.API.Common.CustomExceptionHandlerMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Execute middleware logic
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:StudentManager.API.Common.CustomExceptionHandlerMiddlewareExtensions">
            <summary>
            Custom exception handler middleware extension
            </summary>
        </member>
        <member name="M:StudentManager.API.Common.CustomExceptionHandlerMiddlewareExtensions.UseCustomExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Extenstion method
            </summary>
        </member>
        <member name="T:StudentManager.API.Controllers.BaseController">
            <summary>
            Base controller
            </summary>
        </member>
        <member name="P:StudentManager.API.Controllers.BaseController.Mediator">
            <summary>
            Mediator to encapsulate request/response and publishing interaction patterns
            </summary>
        </member>
        <member name="T:StudentManager.API.Controllers.StudentController">
            <summary>
            Students controller
            </summary>
        </member>
        <member name="M:StudentManager.API.Controllers.StudentController.GetAll">
            <summary>
            Get all students
            </summary>
            <returns>List of students</returns>
        </member>
        <member name="M:StudentManager.API.Controllers.StudentController.GetAllFiltered(StudentManager.Application.Students.Queries.GetStudentsList.GetStudentsListQuery)">
            <summary>
            Get all students with filter parameter
            </summary>
            <param name="query">Filter parameters</param>
            <returns>List of students</returns>
        </member>
        <member name="M:StudentManager.API.Controllers.StudentController.Get(System.Guid)">
            <summary>
            Get student details
            </summary>
            <param name="id">Student ID</param>
            <returns>Student details</returns>
        </member>
        <member name="M:StudentManager.API.Controllers.StudentController.Update(StudentManager.Application.Students.Commands.UpdateStudent.UpdateStudentCommand)">
            <summary>
            Update student
            </summary>
            <param name="command">New student details</param>
        </member>
        <member name="M:StudentManager.API.Controllers.StudentController.Create(StudentManager.Application.Students.Commands.CreateStudent.CreateStudentCommand)">
            <summary>
            Create new student
            </summary>
            <param name="command">New student details</param>
        </member>
        <member name="M:StudentManager.API.Controllers.StudentController.Delete(System.Guid)">
            <summary>
            Delete student
            </summary>
            <param name="id">Student ID</param>
        </member>
        <member name="M:StudentManager.API.Controllers.StudentController.CheckNicknameNotTaken(StudentManager.Application.Students.Queries.CheckNicknameNotTaken.CheckNicknameNotTakenQuery)">
            <summary>
            Check if nickname is already taken
            </summary>
            <returns>True - nickname not taken. False - nickname already taken</returns>
        </member>
        <member name="T:StudentManager.API.Program">
            <summary/>
        </member>
        <member name="M:StudentManager.API.Program.Main(System.String[])">
            <summary/>
        </member>
        <member name="M:StudentManager.API.Program.CreateHostBuilder(System.String[])">
            <summary/>
        </member>
        <member name="T:StudentManager.API.Startup">
            <summary>
            Startup class
            </summary>
        </member>
        <member name="M:StudentManager.API.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Startup constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:StudentManager.API.Startup.Configuration">
            <summary>
            Application configuration properties
            </summary>
        </member>
        <member name="M:StudentManager.API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container
            </summary>
            <param name="services">Collection of service descriptors</param>
        </member>
        <member name="M:StudentManager.API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
